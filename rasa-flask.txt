rasa-flask:
Purpose: This repository serves as the core of your project, integrating the Flask backend API with the Rasa chatbot interface.
Components:
Flask backend API: Handles data fetching, preprocessing, and serving endpoints.
Rasa chatbot: Includes NLU models, dialogue management policies, and training data.
Integration between Flask and Rasa: Custom actions for interacting with the backend API and external services.
Frontend components if necessary, such as templates or static files for the chatbot interface.


# rasa-flask

## How to test ?

- `pip install -r requirements.txt`: Install requirements. To create requirements.txt: `pip install pipreqs` -> `pipreqs .`
- `rasa train`: Train your Rasa model using your configured pipeline and data.
- `rasa shell`: Test your trained model in the command-line shell as well as interact with your model via Flask.
- `rasa run actions`: Run custom actions defined in actions.py alongside your Rasa server.
- run `python app.py` with Flask's built-in server.
- run `python automation_script.py` to run all other scripts that interact with the running Flask server.

## .env file format

- `EXCHANGE_RATE_API_KEY=your_exchange_rate_api_key` for currency conversion.

## General Commands

- `rasa init`: Initialize a new Rasa project.
- `rasa run`: Run the Rasa server to interact with your model via REST API.
- `rasa run --enable-api`: Run the Rasa server with HTTP API enabled.
- `docker ps`: List all active Docker containers.
- `docker kill [container_name]`: Kill a specific Docker container.
- `rasa train nlu`: Train the NLU (Natural Language Understanding) model only, focusing on intents.
- `rasa shell nlu`: Test the NLU model by checking intent confidence scores for a given query.
- `rasa shell -m models\older-model-name`: To run an older model.
- `rasa data validate`: Validate your domain, NLU, and story data for any conflicts or inconsistencies.
- `rasa test`: Run tests on your Rasa model and evaluate the results.
